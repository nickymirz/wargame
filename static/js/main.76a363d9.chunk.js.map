{"version":3,"sources":["components/Gameplay.js","History.js","components/Homepage.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["Gameplay","props","show","state","flag","handlePlayerCard","setState","randomCard","parseInt","playerDeck","Math","floor","random","length","playerCard","cardUserIndex","indexOf","splice","handleComputerCard","computerDeck","randomCardComp","computerCard","cardCompIndex","whoIsBigger","losses","winnings","winningsAmount","lossesAmount","playerName","name","userCards","cards","className","this","onClick","to","Component","createHashHistory","Homepage","updateName","e","target","value","checkTheName","startTheGame","history","push","onChange","type","placeholder","Final","theWinner","window","location","href","App","winning","loses","playercards","randomcard","usercards","i","card","userName","win","console","log","lose","checkWinner","History","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76a363d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Gameplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerName: props.name,\n      playerDeck: props.userCards,\n      computerDeck: props.cards,\n      playerCard: \"\",\n      computerCard: \"\",\n      winnings: 0,\n      losses: 0,\n      flag: true\n    };\n  }\n\n  show = () => {\n    if (this.state.flag === true) {\n      this.handlePlayerCard();\n      this.setState({ flag: false });\n    }\n  };\n\n  handlePlayerCard = () => {\n    {\n      let randomCard = parseInt(\n        this.state.playerDeck[\n          Math.floor(Math.random() * this.state.playerDeck.length)\n        ]\n      );\n      this.setState({ playerCard: randomCard });\n      let cardUserIndex = this.state.playerDeck.indexOf(randomCard);\n      this.state.playerDeck.splice(cardUserIndex, 1);\n    }\n    this.handleComputerCard();\n  };\n\n  handleComputerCard = () => {\n    if (this.state.computerDeck.length !== 0) {\n      let randomCardComp = parseInt(\n        this.state.computerDeck[\n          Math.floor(Math.random() * this.state.computerDeck.length)\n        ]\n      );\n      this.setState({ computerCard: randomCardComp });\n      let cardCompIndex = this.state.computerDeck.indexOf(randomCardComp);\n      this.state.computerDeck.splice(cardCompIndex, 1);\n    }\n    this.whoIsBigger();\n  };\n\n  whoIsBigger = () => {\n    if (this.state.computerCard > this.state.playerCard) {\n      this.setState({ losses: this.state.losses + 1 });\n    }\n    if (this.state.computerCard < this.state.playerCard) {\n      this.setState({ winnings: this.state.winnings + 1 });\n    }\n    if (\n      this.state.playerDeck.length === 0 &&\n      this.state.computerDeck.length === 0\n    ) {\n      this.setState({ winnings: this.state.winnings });\n      this.props.winningsAmount(this.state.winnings);\n      this.setState({ losses: this.state.losses });\n      this.props.lossesAmount(this.state.losses);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"homeContainerBox\">\n        <div className=\"grid-title\">\n          <div className=\"computer\"> Computer </div>\n          <div className=\"computerStatus\"> {this.state.losses} </div>\n             <div className=\"vs\"> vs  </div>\n            <div className=\"title\"> {this.state.playerName} </div>\n            <div className=\"playerStatus\"> {this.state.winnings} </div>\n          </div>\n        <div className=\"grid-cards\">\n          <div className=\"card1\">\n            <div className=\"card-war\">{this.state.computerCard}</div>\n            <div className=\"computerName\"> Computer </div>\n          </div>\n\n          <div className=\"card2\">\n            <div className=\"card-war\">{this.state.playerCard}</div>\n            <div className=\"playerName\"> {this.state.playerName}</div>\n          </div>\n        </div>\n        {this.show}\n        <button className=\"next\" onClick={this.handlePlayerCard} to=\"/final\">\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import { createHashHistory } from 'history';\nexport default createHashHistory();","import React, { Component } from \"react\";\nimport history from \"../History\";\n\nexport default class Homepage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      show: false\n    };\n  }\n\n  updateName = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  checkTheName = () => {\n    if (this.state.name.length > 0) {\n      this.props.startTheGame(this.state.name);\n      history.push(\"/gameplay\");\n    } else {\n      //   alert(\"Enter valid name\");\n      this.setState({ show: true });\n      return <p> \"enter valid name\" </p>;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"homeContainerBox\">\n        <div className=\"whiteBox\">\n          <h3> are you ready to</h3>\n          <h1 className=\"ready\">WAR?</h1>\n          <div>\n            <input\n              className=\"input\"\n              onChange={this.updateName}\n              type=\"text\"\n              placeholder=\"Enter your name\"\n            />\n            {this.state.show && (\n              <span className=\"error\"> * name can not be blank </span>\n            )}\n          </div>\n          <div>\n            <button className=\"play beat\" onClick={this.checkTheName}>\n              Let's Play!\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react'\n\nexport default function Final(props) {\n\n\n    \n    return (\n        <div className=\"homeContainerBox\">\n            <div className=\"whiteBox\">\n            <h4>the winner is:</h4>\n            <h1 className=\"ready\"> {props.theWinner} </h1>\n            <button className=\"again beat\" onClick={()=>window.location.href='/'}> Again? </button>\n        </div>\n        </div>\n    )\n}\n","import { HashRouter, Switch, Route } from \"react-router-dom\";\n// import createHashHistory from 'history/createHashHistory'\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Gameplay from \"./components/Gameplay\";\nimport Homepage from \"./components/Homepage\";\nimport Final from \"./components/Final\";\nimport History from './History'\n\nexport default class App extends Component {\n  state = {\n    name: \"\",\n    winning: 0,\n    loses: 0,\n    theWinner: \"\",\n    playercards: [],\n    cards: [1,1,1,1,\n      2,2,2,2,\n      3,3,3,3,\n      4,4,4,4,\n      5,5,5,5,\n      6,6,6,6,\n      7,7,7,7,\n      8,8,8,8,\n      9,9,9,9,\n      10,10,10,10,\n      11,11,11,11,\n      12,12,12,12,\n      13,13,13,13]\n  };\n\n  randomcard = () => {\n    let usercards = [];\n    for (let i = 1; i <= 26; i++) {\n      let card = this.state.cards[Math.floor(Math.random() * 26)];\n      usercards.push(card);\n      this.state.cards.splice(card, 1);\n    }\n    this.setState({ playercards: [...usercards] });\n  };\n\n  userName = e => {\n    this.setState({ name: e });\n    this.randomcard();\n  };\n\n  winnings = win => {\n    this.setState({ winning: win }, () =>\n      console.log(`your wins: ${this.state.winning}`)\n    );\n  };\n\n  losses = lose => {\n    this.setState({ loses: lose }, () =>\n      console.log(`your loses:${this.state.loses}`)\n    );\n    this.checkWinner();\n  };\n\n  checkWinner = (history) => {\n    if (this.state.winning && this.state.loses) {\n      if (this.state.winning > this.state.loses) {\n        this.setState({ theWinner: this.state.name }, () =>\n          console.log(this.state.theWinner)\n        );\n        History.push(\"/final\");\n      }\n      if (this.state.winning === this.state.loses) {\n        this.setState({ theWinner: \"Tie\" }, () =>\n          console.log(this.state.theWinner)\n        );\n       History.push(\"/final\");\n      }\n      if (this.state.winning < this.state.loses) {\n        this.setState({ theWinner: \"computer\" }, () =>\n          console.log(this.state.theWinner)\n        );\n       History.push(\"/final\");\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter history={History}>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => {\n                return <Homepage startTheGame={this.userName} />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/gameplay\"\n              component={() => {\n                return (\n                  <Gameplay\n                    winningsAmount={this.winnings}\n                    lossesAmount={this.losses}\n                    checkWinner={this.checkWinner}\n                    name={this.state.name}\n                    userCards={this.state.playercards}\n                    cards={this.state.cards}\n                  />\n                );\n              }}\n            />\n            <Route\n              exact\n              path=\"/final\"\n              component={() => {\n                return <Final theWinner={this.state.theWinner} />;\n              }}\n            />\n          </Switch>\n          <div className=\"nicky\"> simple war game by Nicky Mirz </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}